/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Cipher42 API Documentation
 * Cipher42 API Documentation
 * OpenAPI spec version: 1.0.0
 */
import { customFetchInstance } from './api/mutator/custom-instance';
import {
  UpdateUserByIdBody,
  CreateDatasourceBody,
  RunQueryBody,
  Uuid
} from './http-schemas';

import {
  getCurrentUser,
  getUserById,
  updateUserById,
  getUserMemebershipsById,
  getUserInvitations,
  createDatasource,
  getDatasources,
  getDatasourceById,
  deleteDatasourceById,
  runQuery,
  getSchemas,
  getTables
} from './http-client';
  
/**
 * Get current user
 * @summary Get current user
 */

export const getCurrentUserHandler = async () => {
  const res = await getCurrentUser();

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * Get user by ID
 * @summary Get user by ID
 */

export type getUserByIdArgs = {
  pathParams: {
    userId: Uuid
  };
}

export const getUserByIdHandler = async (args: getUserByIdArgs) => {
  const res = await getUserById(args.pathParams.userId);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * Update user by ID
 * @summary Update user by ID
 */

export type updateUserByIdArgs = {
  pathParams: {
    userId: Uuid
  };
  bodyParams: UpdateUserByIdBody;
}

export const updateUserByIdHandler = async (args: updateUserByIdArgs) => {
  const res = await updateUserById(args.pathParams.userId, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * Get user memberships by ID
 * @summary Get user memberships by ID
 */

export type getUserMemebershipsByIdArgs = {
  pathParams: {
    userId: Uuid
  };
}

export const getUserMemebershipsByIdHandler = async (args: getUserMemebershipsByIdArgs) => {
  const res = await getUserMemebershipsById(args.pathParams.userId);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * Get invitations for a user by ID
 * @summary Get invitations for a user by ID
 */

export type getUserInvitationsArgs = {
  pathParams: {
    userId: Uuid
  };
}

export const getUserInvitationsHandler = async (args: getUserInvitationsArgs) => {
  const res = await getUserInvitations(args.pathParams.userId);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * Create datasource
 * @summary Create datasource
 */

export type createDatasourceArgs = {
  pathParams: {
    orgId: Uuid
  };
  bodyParams: CreateDatasourceBody;
}

export const createDatasourceHandler = async (args: createDatasourceArgs) => {
  const res = await createDatasource(args.pathParams.orgId, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * Get datasources
 * @summary Get datasources
 */

export type getDatasourcesArgs = {
  pathParams: {
    orgId: Uuid
  };
}

export const getDatasourcesHandler = async (args: getDatasourcesArgs) => {
  const res = await getDatasources(args.pathParams.orgId);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * Get datasource by id
 * @summary Get datasource by id
 */

export type getDatasourceByIdArgs = {
  pathParams: {
    orgId: Uuid,
    datasourceId: Uuid
  };
}

export const getDatasourceByIdHandler = async (args: getDatasourceByIdArgs) => {
  const res = await getDatasourceById(args.pathParams.orgId, args.pathParams.datasourceId);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * Delete datasource by id
 * @summary Delete datasource by id
 */

export type deleteDatasourceByIdArgs = {
  pathParams: {
    orgId: Uuid,
    datasourceId: Uuid
  };
}

export const deleteDatasourceByIdHandler = async (args: deleteDatasourceByIdArgs) => {
  const res = await deleteDatasourceById(args.pathParams.orgId, args.pathParams.datasourceId);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * Run query
 * @summary Run query
 */

export type runQueryArgs = {
  pathParams: {
    orgId: Uuid,
    datasourceId: Uuid
  };
  bodyParams: RunQueryBody;
}

export const runQueryHandler = async (args: runQueryArgs) => {
  const res = await runQuery(args.pathParams.orgId, args.pathParams.datasourceId, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * Get schemas for a datasource
 * @summary Get schemas for a datasource
 */

export type getSchemasArgs = {
  pathParams: {
    orgId: Uuid,
    datasourceId: Uuid
  };
}

export const getSchemasHandler = async (args: getSchemasArgs) => {
  const res = await getSchemas(args.pathParams.orgId, args.pathParams.datasourceId);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * Get tables for a schema
 * @summary Get tables for a schema
 */

export type getTablesArgs = {
  pathParams: {
    orgId: Uuid,
    datasourceId: Uuid,
    schemaName: string
  };
}

export const getTablesHandler = async (args: getTablesArgs) => {
  const res = await getTables(args.pathParams.orgId, args.pathParams.datasourceId, args.pathParams.schemaName);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};
