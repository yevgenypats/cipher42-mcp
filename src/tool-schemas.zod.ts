/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Cipher42 API Documentation
 * Cipher42 API Documentation
 * OpenAPI spec version: 1.0.0
 */
import { z as zod } from 'zod';

export const getCurrentUserResponseDataIdRegExp = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$');


export const getCurrentUserResponse = zod.object({
  "data": zod.object({
  "id": zod.string().regex(getCurrentUserResponseDataIdRegExp),
  "firstName": zod.string().nullable(),
  "lastName": zod.string().nullable(),
  "email": zod.string().email(),
  "createdAt": zod.string(),
  "updatedAt": zod.string()
})
})


export const getUserByIdPathUserIdRegExp = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$');


export const getUserByIdParams = zod.object({
  "userId": zod.string().regex(getUserByIdPathUserIdRegExp)
})

export const getUserByIdResponseDataIdRegExp = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$');


export const getUserByIdResponse = zod.object({
  "data": zod.object({
  "id": zod.string().regex(getUserByIdResponseDataIdRegExp),
  "firstName": zod.string().nullable(),
  "lastName": zod.string().nullable(),
  "email": zod.string().email(),
  "createdAt": zod.string(),
  "updatedAt": zod.string()
})
})


export const updateUserByIdPathUserIdRegExp = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$');


export const updateUserByIdParams = zod.object({
  "userId": zod.string().regex(updateUserByIdPathUserIdRegExp)
})

export const updateUserByIdBodyFirstNameMin = 2;
export const updateUserByIdBodyLastNameMin = 2;


export const updateUserByIdBody = zod.object({
  "firstName": zod.string().min(updateUserByIdBodyFirstNameMin).optional(),
  "lastName": zod.string().min(updateUserByIdBodyLastNameMin).optional()
})

export const updateUserByIdResponseDataIdRegExp = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$');


export const updateUserByIdResponse = zod.object({
  "data": zod.object({
  "id": zod.string().regex(updateUserByIdResponseDataIdRegExp),
  "firstName": zod.string().nullable(),
  "lastName": zod.string().nullable(),
  "email": zod.string().email(),
  "createdAt": zod.string(),
  "updatedAt": zod.string()
}).optional()
})


export const getUserMemebershipsByIdPathUserIdRegExp = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$');


export const getUserMemebershipsByIdParams = zod.object({
  "userId": zod.string().regex(getUserMemebershipsByIdPathUserIdRegExp)
})

export const getUserMemebershipsByIdResponseDataItemOrganizationIdRegExpOne = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$');
export const getUserMemebershipsByIdResponseDataItemUserIdRegExpOne = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$');


export const getUserMemebershipsByIdResponse = zod.object({
  "data": zod.array(zod.object({
  "userId": zod.string().uuid(),
  "organizationId": zod.string().uuid(),
  "organization": zod.object({
  "id": zod.string().regex(getUserMemebershipsByIdResponseDataItemOrganizationIdRegExpOne),
  "name": zod.string(),
  "tier": zod.enum(['free', 'pro']),
  "trialEnd": zod.string().nullable(),
  "requestUpgrade": zod.boolean(),
  "createdAt": zod.string(),
  "updatedAt": zod.string()
}),
  "user": zod.object({
  "id": zod.string().regex(getUserMemebershipsByIdResponseDataItemUserIdRegExpOne),
  "firstName": zod.string().nullable(),
  "lastName": zod.string().nullable(),
  "email": zod.string().email(),
  "createdAt": zod.string(),
  "updatedAt": zod.string()
}),
  "role": zod.enum(['admin', 'member']),
  "createdAt": zod.string(),
  "updatedAt": zod.string()
})).optional()
})


export const getUserInvitationsPathUserIdRegExp = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$');


export const getUserInvitationsParams = zod.object({
  "userId": zod.string().regex(getUserInvitationsPathUserIdRegExp)
})

export const getUserInvitationsResponseDataItemIdRegExp = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$');
export const getUserInvitationsResponseDataItemOrganizationIdRegExp = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$');
export const getUserInvitationsResponseDataItemOrganizationIdRegExpOne = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$');


export const getUserInvitationsResponse = zod.object({
  "data": zod.array(zod.object({
  "id": zod.string().regex(getUserInvitationsResponseDataItemIdRegExp),
  "organizationId": zod.string().regex(getUserInvitationsResponseDataItemOrganizationIdRegExp),
  "organization": zod.object({
  "id": zod.string().regex(getUserInvitationsResponseDataItemOrganizationIdRegExpOne),
  "name": zod.string(),
  "tier": zod.enum(['free', 'pro']),
  "trialEnd": zod.string().nullable(),
  "requestUpgrade": zod.boolean(),
  "createdAt": zod.string(),
  "updatedAt": zod.string()
}),
  "email": zod.string().email(),
  "role": zod.enum(['admin', 'member']),
  "createdAt": zod.string(),
  "updatedAt": zod.string()
}))
})


export const createDatasourcePathOrgIdRegExp = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$');


export const createDatasourceParams = zod.object({
  "orgId": zod.string().regex(createDatasourcePathOrgIdRegExp)
})

export const createDatasourceBodyNameMin = 2;
export const createDatasourceBodyConfigProjectIdMin = 6;

export const createDatasourceBodyConfigProjectIdMax = 30;

export const createDatasourceBodyConfigProjectIdRegExp = new RegExp('^[a-z0-9-]+$');
export const createDatasourceBodyConfigServiceAccountJsonPrivateKeyMax = 2000;


export const createDatasourceBody = zod.object({
  "name": zod.string().min(createDatasourceBodyNameMin),
  "config": zod.discriminatedUnion('type', [zod.object({
  "type": zod.enum(['bigquery']),
  "projectId": zod.string().min(createDatasourceBodyConfigProjectIdMin).max(createDatasourceBodyConfigProjectIdMax).regex(createDatasourceBodyConfigProjectIdRegExp).describe('The project ID must contain only lowercase letters, numbers, and hyphens.'),
  "serviceAccountJson": zod.object({
  "client_email": zod.string().email(),
  "private_key": zod.string().min(1).max(createDatasourceBodyConfigServiceAccountJsonPrivateKeyMax)
}).describe('The service account JSON must be a valid JSON object.')
}),zod.object({
  "type": zod.enum(['snowflake']),
  "account": zod.string(),
  "username": zod.string(),
  "password": zod.string(),
  "warehouse": zod.string()
})])
})

export const createDatasourceResponseDataIdRegExp = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$');
export const createDatasourceResponseDataConfigProjectIdMin = 6;

export const createDatasourceResponseDataConfigProjectIdMax = 30;

export const createDatasourceResponseDataConfigProjectIdRegExp = new RegExp('^[a-z0-9-]+$');


export const createDatasourceResponse = zod.object({
  "data": zod.object({
  "id": zod.string().regex(createDatasourceResponseDataIdRegExp),
  "name": zod.string(),
  "config": zod.discriminatedUnion('type', [zod.object({
  "type": zod.enum(['bigquery']),
  "projectId": zod.string().min(createDatasourceResponseDataConfigProjectIdMin).max(createDatasourceResponseDataConfigProjectIdMax).regex(createDatasourceResponseDataConfigProjectIdRegExp).describe('The project ID must contain only lowercase letters, numbers, and hyphens.')
}),zod.object({
  "type": zod.enum(['snowflake']),
  "account": zod.string(),
  "username": zod.string(),
  "warehouse": zod.string()
})]),
  "lastIndexTime": zod.string().nullable(),
  "lastIndexStart": zod.string().nullable(),
  "lastIndexError": zod.string().nullable(),
  "indexStartTime": zod.string().nullable(),
  "indexEndTime": zod.string().nullable(),
  "indexStatus": zod.enum(['pending', 'in_progress', 'completed', 'partial', 'failed']).nullable(),
  "indexError": zod.string().nullable(),
  "createdAt": zod.string(),
  "updatedAt": zod.string()
})
})


export const getDatasourcesPathOrgIdRegExp = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$');


export const getDatasourcesParams = zod.object({
  "orgId": zod.string().regex(getDatasourcesPathOrgIdRegExp)
})

export const getDatasourcesResponseDataItemIdRegExp = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$');
export const getDatasourcesResponseDataItemConfigProjectIdMin = 6;

export const getDatasourcesResponseDataItemConfigProjectIdMax = 30;

export const getDatasourcesResponseDataItemConfigProjectIdRegExp = new RegExp('^[a-z0-9-]+$');


export const getDatasourcesResponse = zod.object({
  "data": zod.array(zod.object({
  "id": zod.string().regex(getDatasourcesResponseDataItemIdRegExp),
  "name": zod.string(),
  "config": zod.discriminatedUnion('type', [zod.object({
  "type": zod.enum(['bigquery']),
  "projectId": zod.string().min(getDatasourcesResponseDataItemConfigProjectIdMin).max(getDatasourcesResponseDataItemConfigProjectIdMax).regex(getDatasourcesResponseDataItemConfigProjectIdRegExp).describe('The project ID must contain only lowercase letters, numbers, and hyphens.')
}),zod.object({
  "type": zod.enum(['snowflake']),
  "account": zod.string(),
  "username": zod.string(),
  "warehouse": zod.string()
})]),
  "lastIndexTime": zod.string().nullable(),
  "lastIndexStart": zod.string().nullable(),
  "lastIndexError": zod.string().nullable(),
  "indexStartTime": zod.string().nullable(),
  "indexEndTime": zod.string().nullable(),
  "indexStatus": zod.enum(['pending', 'in_progress', 'completed', 'partial', 'failed']).nullable(),
  "indexError": zod.string().nullable(),
  "createdAt": zod.string(),
  "updatedAt": zod.string()
})),
  "meta": zod.object({
  "total": zod.number(),
  "page": zod.number(),
  "limit": zod.number(),
  "totalPages": zod.number(),
  "hasNextPage": zod.boolean(),
  "hasPrevPage": zod.boolean()
}).optional()
})


export const getDatasourceByIdPathOrgIdRegExp = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$');
export const getDatasourceByIdPathDatasourceIdRegExp = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$');


export const getDatasourceByIdParams = zod.object({
  "orgId": zod.string().regex(getDatasourceByIdPathOrgIdRegExp),
  "datasourceId": zod.string().regex(getDatasourceByIdPathDatasourceIdRegExp)
})

export const getDatasourceByIdResponseDataIdRegExp = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$');
export const getDatasourceByIdResponseDataConfigProjectIdMin = 6;

export const getDatasourceByIdResponseDataConfigProjectIdMax = 30;

export const getDatasourceByIdResponseDataConfigProjectIdRegExp = new RegExp('^[a-z0-9-]+$');


export const getDatasourceByIdResponse = zod.object({
  "data": zod.object({
  "id": zod.string().regex(getDatasourceByIdResponseDataIdRegExp),
  "name": zod.string(),
  "config": zod.discriminatedUnion('type', [zod.object({
  "type": zod.enum(['bigquery']),
  "projectId": zod.string().min(getDatasourceByIdResponseDataConfigProjectIdMin).max(getDatasourceByIdResponseDataConfigProjectIdMax).regex(getDatasourceByIdResponseDataConfigProjectIdRegExp).describe('The project ID must contain only lowercase letters, numbers, and hyphens.')
}),zod.object({
  "type": zod.enum(['snowflake']),
  "account": zod.string(),
  "username": zod.string(),
  "warehouse": zod.string()
})]),
  "lastIndexTime": zod.string().nullable(),
  "lastIndexStart": zod.string().nullable(),
  "lastIndexError": zod.string().nullable(),
  "indexStartTime": zod.string().nullable(),
  "indexEndTime": zod.string().nullable(),
  "indexStatus": zod.enum(['pending', 'in_progress', 'completed', 'partial', 'failed']).nullable(),
  "indexError": zod.string().nullable(),
  "createdAt": zod.string(),
  "updatedAt": zod.string()
})
})


export const deleteDatasourceByIdPathOrgIdRegExp = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$');
export const deleteDatasourceByIdPathDatasourceIdRegExp = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$');


export const deleteDatasourceByIdParams = zod.object({
  "orgId": zod.string().regex(deleteDatasourceByIdPathOrgIdRegExp),
  "datasourceId": zod.string().regex(deleteDatasourceByIdPathDatasourceIdRegExp)
})

export const deleteDatasourceByIdResponse = zod.object({
  "data": zod.any().optional()
})


export const runQueryPathOrgIdRegExp = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$');
export const runQueryPathDatasourceIdRegExp = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$');


export const runQueryParams = zod.object({
  "orgId": zod.string().regex(runQueryPathOrgIdRegExp),
  "datasourceId": zod.string().regex(runQueryPathDatasourceIdRegExp)
})

export const runQueryBody = zod.object({
  "query": zod.string()
})

export const runQueryResponse = zod.object({
  "data": zod.object({
  "columns": zod.array(zod.object({
  "name": zod.string(),
  "type": zod.string()
})),
  "rows": zod.array(zod.record(zod.string(), zod.any()))
}),
  "meta": zod.object({
  "total": zod.number(),
  "page": zod.number(),
  "limit": zod.number(),
  "totalPages": zod.number(),
  "hasNextPage": zod.boolean(),
  "hasPrevPage": zod.boolean()
}).optional()
})


export const getSchemasPathOrgIdRegExp = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$');
export const getSchemasPathDatasourceIdRegExp = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$');


export const getSchemasParams = zod.object({
  "orgId": zod.string().regex(getSchemasPathOrgIdRegExp),
  "datasourceId": zod.string().regex(getSchemasPathDatasourceIdRegExp)
})

export const getSchemasResponse = zod.object({
  "data": zod.array(zod.object({
  "name": zod.string(),
  "updatedAt": zod.string()
}))
})


export const getTablesPathOrgIdRegExp = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$');
export const getTablesPathDatasourceIdRegExp = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$');


export const getTablesParams = zod.object({
  "orgId": zod.string().regex(getTablesPathOrgIdRegExp),
  "datasourceId": zod.string().regex(getTablesPathDatasourceIdRegExp),
  "schemaName": zod.string()
})

export const getTablesResponse = zod.object({
  "data": zod.array(zod.object({
  "name": zod.string(),
  "columns": zod.array(zod.object({
  "name": zod.string(),
  "type": zod.string()
})),
  "metadata": zod.any().optional(),
  "updatedAt": zod.string()
})),
  "meta": zod.object({
  "total": zod.number(),
  "page": zod.number(),
  "limit": zod.number(),
  "totalPages": zod.number(),
  "hasNextPage": zod.boolean(),
  "hasPrevPage": zod.boolean()
}).optional()
})

