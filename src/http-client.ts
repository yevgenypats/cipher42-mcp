/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Cipher42 API Documentation
 * Cipher42 API Documentation
 * OpenAPI spec version: 1.0.0
 */

import { customFetchInstance } from './api/mutator/custom-instance';
import { GetCurrentUser200,
ErrorResponse,
GetUserById200,
Uuid,
UpdateUserById200,
UpdateUserByIdBody,
GetUserMemebershipsById200,
GetUserInvitations200,
CreateDatasource200,
CreateDatasourceBody,
GetDatasources200,
GetDatasourceById200,
DeleteDatasourceById200,
RunQuery200,
RunQueryBody,
GetSchemas200,
GetTables200 } from './http-schemas';

export type HTTPStatusCode1xx = 100 | 101 | 102 | 103;
export type HTTPStatusCode2xx = 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207;
export type HTTPStatusCode3xx = 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308;
export type HTTPStatusCode4xx = 400 | 401 | 402 | 403 | 404 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 426 | 428 | 429 | 431 | 451;
export type HTTPStatusCode5xx = 500 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
export type HTTPStatusCodes = HTTPStatusCode1xx | HTTPStatusCode2xx | HTTPStatusCode3xx | HTTPStatusCode4xx | HTTPStatusCode5xx;


export type getCurrentUserResponse200 = {
  data: GetCurrentUser200
  status: 200
}

export type getCurrentUserResponseDefault = {
  data: ErrorResponse
  status: Exclude<HTTPStatusCodes, 200>
}
    
export type getCurrentUserResponseComposite = getCurrentUserResponse200 | getCurrentUserResponseDefault;
    
export type getCurrentUserResponse = getCurrentUserResponseComposite & {
  headers: Headers;
}

export const getGetCurrentUserUrl = () => {


  

  return `https://api.cipher42.ai/api/v1/users/current`
}

export const getCurrentUser = async ( options?: RequestInit): Promise<getCurrentUserResponse> => {
  
  return customFetchInstance<getCurrentUserResponse>(getGetCurrentUserUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getUserByIdResponse200 = {
  data: GetUserById200
  status: 200
}

export type getUserByIdResponseDefault = {
  data: ErrorResponse
  status: Exclude<HTTPStatusCodes, 200>
}
    
export type getUserByIdResponseComposite = getUserByIdResponse200 | getUserByIdResponseDefault;
    
export type getUserByIdResponse = getUserByIdResponseComposite & {
  headers: Headers;
}

export const getGetUserByIdUrl = (userId: Uuid,) => {


  

  return `https://api.cipher42.ai/api/v1/users/${userId}`
}

export const getUserById = async (userId: Uuid, options?: RequestInit): Promise<getUserByIdResponse> => {
  
  return customFetchInstance<getUserByIdResponse>(getGetUserByIdUrl(userId),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type updateUserByIdResponse200 = {
  data: UpdateUserById200
  status: 200
}

export type updateUserByIdResponseDefault = {
  data: ErrorResponse
  status: Exclude<HTTPStatusCodes, 200>
}
    
export type updateUserByIdResponseComposite = updateUserByIdResponse200 | updateUserByIdResponseDefault;
    
export type updateUserByIdResponse = updateUserByIdResponseComposite & {
  headers: Headers;
}

export const getUpdateUserByIdUrl = (userId: Uuid,) => {


  

  return `https://api.cipher42.ai/api/v1/users/${userId}`
}

export const updateUserById = async (userId: Uuid,
    updateUserByIdBody: UpdateUserByIdBody, options?: RequestInit): Promise<updateUserByIdResponse> => {
  
  return customFetchInstance<updateUserByIdResponse>(getUpdateUserByIdUrl(userId),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateUserByIdBody,)
  }
);}



export type getUserMemebershipsByIdResponse200 = {
  data: GetUserMemebershipsById200
  status: 200
}

export type getUserMemebershipsByIdResponseDefault = {
  data: ErrorResponse
  status: Exclude<HTTPStatusCodes, 200>
}
    
export type getUserMemebershipsByIdResponseComposite = getUserMemebershipsByIdResponse200 | getUserMemebershipsByIdResponseDefault;
    
export type getUserMemebershipsByIdResponse = getUserMemebershipsByIdResponseComposite & {
  headers: Headers;
}

export const getGetUserMemebershipsByIdUrl = (userId: Uuid,) => {


  

  return `https://api.cipher42.ai/api/v1/users/${userId}/memberships`
}

export const getUserMemebershipsById = async (userId: Uuid, options?: RequestInit): Promise<getUserMemebershipsByIdResponse> => {
  
  return customFetchInstance<getUserMemebershipsByIdResponse>(getGetUserMemebershipsByIdUrl(userId),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getUserInvitationsResponse200 = {
  data: GetUserInvitations200
  status: 200
}

export type getUserInvitationsResponseDefault = {
  data: ErrorResponse
  status: Exclude<HTTPStatusCodes, 200>
}
    
export type getUserInvitationsResponseComposite = getUserInvitationsResponse200 | getUserInvitationsResponseDefault;
    
export type getUserInvitationsResponse = getUserInvitationsResponseComposite & {
  headers: Headers;
}

export const getGetUserInvitationsUrl = (userId: Uuid,) => {


  

  return `https://api.cipher42.ai/api/v1/users/${userId}/invitations`
}

export const getUserInvitations = async (userId: Uuid, options?: RequestInit): Promise<getUserInvitationsResponse> => {
  
  return customFetchInstance<getUserInvitationsResponse>(getGetUserInvitationsUrl(userId),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type createDatasourceResponse200 = {
  data: CreateDatasource200
  status: 200
}

export type createDatasourceResponseDefault = {
  data: ErrorResponse
  status: Exclude<HTTPStatusCodes, 200>
}
    
export type createDatasourceResponseComposite = createDatasourceResponse200 | createDatasourceResponseDefault;
    
export type createDatasourceResponse = createDatasourceResponseComposite & {
  headers: Headers;
}

export const getCreateDatasourceUrl = (orgId: Uuid,) => {


  

  return `https://api.cipher42.ai/api/v1/orgs/${orgId}/datasources`
}

export const createDatasource = async (orgId: Uuid,
    createDatasourceBody: CreateDatasourceBody, options?: RequestInit): Promise<createDatasourceResponse> => {
  
  return customFetchInstance<createDatasourceResponse>(getCreateDatasourceUrl(orgId),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createDatasourceBody,)
  }
);}



export type getDatasourcesResponse200 = {
  data: GetDatasources200
  status: 200
}

export type getDatasourcesResponseDefault = {
  data: ErrorResponse
  status: Exclude<HTTPStatusCodes, 200>
}
    
export type getDatasourcesResponseComposite = getDatasourcesResponse200 | getDatasourcesResponseDefault;
    
export type getDatasourcesResponse = getDatasourcesResponseComposite & {
  headers: Headers;
}

export const getGetDatasourcesUrl = (orgId: Uuid,) => {


  

  return `https://api.cipher42.ai/api/v1/orgs/${orgId}/datasources`
}

export const getDatasources = async (orgId: Uuid, options?: RequestInit): Promise<getDatasourcesResponse> => {
  
  return customFetchInstance<getDatasourcesResponse>(getGetDatasourcesUrl(orgId),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getDatasourceByIdResponse200 = {
  data: GetDatasourceById200
  status: 200
}

export type getDatasourceByIdResponseDefault = {
  data: ErrorResponse
  status: Exclude<HTTPStatusCodes, 200>
}
    
export type getDatasourceByIdResponseComposite = getDatasourceByIdResponse200 | getDatasourceByIdResponseDefault;
    
export type getDatasourceByIdResponse = getDatasourceByIdResponseComposite & {
  headers: Headers;
}

export const getGetDatasourceByIdUrl = (orgId: Uuid,
    datasourceId: Uuid,) => {


  

  return `https://api.cipher42.ai/api/v1/orgs/${orgId}/datasources/${datasourceId}`
}

export const getDatasourceById = async (orgId: Uuid,
    datasourceId: Uuid, options?: RequestInit): Promise<getDatasourceByIdResponse> => {
  
  return customFetchInstance<getDatasourceByIdResponse>(getGetDatasourceByIdUrl(orgId,datasourceId),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type deleteDatasourceByIdResponse200 = {
  data: DeleteDatasourceById200
  status: 200
}

export type deleteDatasourceByIdResponseDefault = {
  data: ErrorResponse
  status: Exclude<HTTPStatusCodes, 200>
}
    
export type deleteDatasourceByIdResponseComposite = deleteDatasourceByIdResponse200 | deleteDatasourceByIdResponseDefault;
    
export type deleteDatasourceByIdResponse = deleteDatasourceByIdResponseComposite & {
  headers: Headers;
}

export const getDeleteDatasourceByIdUrl = (orgId: Uuid,
    datasourceId: Uuid,) => {


  

  return `https://api.cipher42.ai/api/v1/orgs/${orgId}/datasources/${datasourceId}`
}

export const deleteDatasourceById = async (orgId: Uuid,
    datasourceId: Uuid, options?: RequestInit): Promise<deleteDatasourceByIdResponse> => {
  
  return customFetchInstance<deleteDatasourceByIdResponse>(getDeleteDatasourceByIdUrl(orgId,datasourceId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type runQueryResponse200 = {
  data: RunQuery200
  status: 200
}

export type runQueryResponseDefault = {
  data: ErrorResponse
  status: Exclude<HTTPStatusCodes, 200>
}
    
export type runQueryResponseComposite = runQueryResponse200 | runQueryResponseDefault;
    
export type runQueryResponse = runQueryResponseComposite & {
  headers: Headers;
}

export const getRunQueryUrl = (orgId: Uuid,
    datasourceId: Uuid,) => {


  

  return `https://api.cipher42.ai/api/v1/orgs/${orgId}/datasources/${datasourceId}/query`
}

export const runQuery = async (orgId: Uuid,
    datasourceId: Uuid,
    runQueryBody: RunQueryBody, options?: RequestInit): Promise<runQueryResponse> => {
  
  return customFetchInstance<runQueryResponse>(getRunQueryUrl(orgId,datasourceId),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      runQueryBody,)
  }
);}



export type getSchemasResponse200 = {
  data: GetSchemas200
  status: 200
}

export type getSchemasResponseDefault = {
  data: ErrorResponse
  status: Exclude<HTTPStatusCodes, 200>
}
    
export type getSchemasResponseComposite = getSchemasResponse200 | getSchemasResponseDefault;
    
export type getSchemasResponse = getSchemasResponseComposite & {
  headers: Headers;
}

export const getGetSchemasUrl = (orgId: Uuid,
    datasourceId: Uuid,) => {


  

  return `https://api.cipher42.ai/api/v1/orgs/${orgId}/datasources/${datasourceId}/schemas`
}

export const getSchemas = async (orgId: Uuid,
    datasourceId: Uuid, options?: RequestInit): Promise<getSchemasResponse> => {
  
  return customFetchInstance<getSchemasResponse>(getGetSchemasUrl(orgId,datasourceId),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getTablesResponse200 = {
  data: GetTables200
  status: 200
}

export type getTablesResponseDefault = {
  data: ErrorResponse
  status: Exclude<HTTPStatusCodes, 200>
}
    
export type getTablesResponseComposite = getTablesResponse200 | getTablesResponseDefault;
    
export type getTablesResponse = getTablesResponseComposite & {
  headers: Headers;
}

export const getGetTablesUrl = (orgId: Uuid,
    datasourceId: Uuid,
    schemaName: string,) => {


  

  return `https://api.cipher42.ai/api/v1/orgs/${orgId}/datasources/${datasourceId}/schemas/${schemaName}/tables`
}

export const getTables = async (orgId: Uuid,
    datasourceId: Uuid,
    schemaName: string, options?: RequestInit): Promise<getTablesResponse> => {
  
  return customFetchInstance<getTablesResponse>(getGetTablesUrl(orgId,datasourceId,schemaName),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


